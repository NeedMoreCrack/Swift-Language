/*:
## 函數種類

 編寫函數時，現在有四種可能的參數與傳回值的組合。下面簡單描述了每種類型的函數可能的使用時機：

 **❌ 參數，❌ 傳回值**\
 `paintAndHangPicture()`

 如果呼叫的函數沒有任何參數且不會傳回任何值，就好像在說：「我希望有事情發生，但我不是特別在意它是怎麼發生的，或者之後會發生什麼。」
 
 想像一下，你請一位畫家為你畫一幅畫。如果你使用 `paintAndHangPicture()` 這樣的函數，藝術家會自由隨性創作，接著將完成的作品永遠掛在他們屬意的地點，甚至可能掛在其他城市。
 
 呼叫這種類型的函數可以省下決策的工作，但也需要許多的信任。這個函數自行完成工作，也不會傳回任何資訊，但是可能產生你無法控制的影響。
 
 BoogieBot 舞蹈動作即是屬於這種類型的函數。函數名稱會告訴 BoogieBot 做什麼動作。它的「工作」就是動作本身。
 
 **✅ 參數，❌ 傳回值**\
 `paintAndHangPicture(width: Int, height: Int, dominantColor: UIColor)`

 這樣的函數確實可以根據引數改變，但不會傳回任何內容。
 
 現在，你可以請這位畫家畫一幅特定尺寸的畫，或許使用特定的顏色調性或畫你喜愛的風景。你對執行的工作進行更多的控制，但是畫家仍掌握繪畫的主控權，並且可以隨意將畫掛在任何地方。
 
 `hello(name:)` 函數就是這樣的例子。你控制名稱，而「工作」是將字串列印到主控台。
 
 **❌ 參數，✅ 傳回值**\
 `paintPicture() -> Painting`

 這種類型的函數不需要任何額外資訊就可傳回值。
 
 想像一下，你沒有向畫家提供任何輸入參數，因此他們完全按照自己的意願作畫。作品完成之後，他們直接將成品畫作交給你。現在，你可以將畫作掛起來、販售，甚至自己再畫上去。

 本課程進行到目前為止，還沒有出現過這種組合方式的函數。提供亂數或顯示目前日期和時間的函數可能就是這樣的函數。
 
 **✅ 參數，✅ 傳回值**\
 `paintPicture(width: Int, height: Int, dominantColor: UIColor) -> Painting`

 這種類型的函數依據傳入的資訊提供傳回值。它接受所有輸入建議並將它們轉換為新的輸出值。
 
 在本例中，你向畫家提出你希望他們創作的內容，並將成品畫作交給你，之後你可以完全按照自己的意願進行處理。
 
 `spaceAvailableMessage(eachVideoDuration:, numberOfVideos:)` 函數就屬於這種類型的函數。

 - callout(附註：): 當函數執行與傳回值無關的工作時 (例如列印到主控台)，這類工作稱為「副作用」。為函數命名時，最好以某種方式在名稱中包含副作用，例如 `print()`。如果函數沒有傳回值，那麼它所有的工作都將被視為副作用。這就是為什麼在此頁面上不傳回值的函數要命名為 `paintAndHangPicture` 的原因。

 在下一頁中，我們來學習函數可以透過怎樣的方式讓任務更容易理解。
 
[上一頁](@previous)  |  第 8 頁，共 18 頁  |  [下一頁：建構區塊](@next)
 */