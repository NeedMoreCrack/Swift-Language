/*:
## 自訂類型

 你不必受限於 Swift 內建的類型。你可以使用現有類型，做為定義自訂類型的基礎。
 
 在 Swift 中建立新類型的一種方法是定義一個「結構」，通常稱為「struct」。結構是將數值集結在一起的一個簡單方式。作為資料抽象概念，結構提供了資料類型抽象屬性之間的一些差異，以及其具體呈現方式。不同於陣列必須包含相同類型的元件，結構可以包含不同類型的元件。
 
例如，若要表示一首歌，你可像下列這樣宣告一個 `Song` 結構：
 */
struct Song {
    let title: String
    let artist: String
    let duration: Int
}
/*:
 這將建立一個新類型，稱為 `Song`。
 
 你已在《實例》課程中學到關於屬性的知識。`Song` 具有三個屬性：`title`、`artist` 和 `duration`，每個屬性都用 `let` 和類型註解宣告。你可以將 `Song` 想成是一種集結以下三個常數的抽象概念：兩個字串和一個整數值，用來表示具有其本身標題、藝人和樂曲時間的一首特定歌曲。

 - callout(附註：): 你的結構是一種新類型，與其他所有類型 (`String`、`Int`……) 一樣，其名稱應以大寫字母開頭。屬性名稱應以小寫字母開頭。這樣在閱讀程式碼時可輕鬆區分類型和數值。

 你宣告新類型後，就可像這樣建立一個實例：
 */
let song = Song(title: "No, no, no", artist: "Fizz", duration: 150)
/*:
別忘了《實例》課程中曾提到，每個類型至少有一個初始化程式。當你宣告結構時，將會自動建立一個初始化程式。因為這個初始化程式在結構中的每個成員屬性都有一個參數，所以其稱為「成員級初始化程式」。

 - callout(實驗：): 嘗試建立一首新 `Song`。請注意，自動補完彈出式選單會包含成員級初始化程式。
 */
let mySong = Song(title: "Buzz", artist: "Fizz", duration: 160)

/*:
接下來，我們來深入了解結構的屬性。

[上一頁](@previous)  |  第 2 頁，共 10 頁  |  [下一頁：結構屬性](@next)
 */