/*:
## 屬性

 在此 Playground 一開始，你已經思考過不同的類型，如「城市」和「汽車」。你可以想像城市的每個實例都有不同的名稱，或汽車的每個實例都有自己的里程數。
 
 同樣地，在 Swift 中，每個實例都有一或多筆相關聯的資訊。這些值稱為「屬性」。
  
 知道字串是否確實包含字元通常非常有用。屬性 `isEmpty` 可以解決這個問題。
 
 此屬性的宣告如下所示：\
 `var isEmpty: Bool { get }`

 此宣告看起來與變數宣告相似。就像方法是內建於類型每個實例中的函數一樣，屬性是內建於每個類型實例中的常數或變數。
 
 這個屬性名為 `isEmpty`，類型為 `Bool`。它標記為 `var`，因為屬性值可以隨著字串內容更動而變更。\
 `{ get }` 表示你只能取得此屬性的值，但無法設定。這也稱為「唯讀」屬性。
 
 屬性的呼叫方式是在實例之後使用句點 (`.`)，後接屬性名稱：
 */
let something = "It was the best of times"
something.isEmpty

let nothing = ""
nothing.isEmpty
/*:
 屬性與方法適用相同的類型安全規則：

- 你無法使用沒有實例的屬性。
- 你只能使用屬於實例類型的屬性。

 - callout(附註：): 你到目前為止所使用的類型都沒有太多屬性，因為其儲存的資訊非常簡單。在稍後的課程中，你將學習到更加複雜的類型。

 在下一頁中，我們來學習方法與屬性之間的差異。

[上一頁](@previous)  |  第 6 頁，共 17 頁  |  [下一頁：屬性與方法的比較](@next)
 */