/*:
## 命名事物
在程式設計中，名稱可具有高度描述性且很實用，幫你區分並找到各類項目，如同在現實生活中為各種事物命名一樣。在程式碼中，當你為某個值命名之後，即可在使用該值的任何地方使用該名稱。這是一種「抽象概念」形式，可讓程式碼更易於閱讀和理解。

名稱也可避免程式碼發生錯誤。例如在寵物展的實驗中，你每次更新都必須改寫多行程式碼中的數字，這樣很容易出錯。但如果你為每個值都定義了名稱 (例如，烏龜的數目)，則只須更改該名稱的定義一次，程式碼中出現該名稱的所有地方就會套用更新後的定義。

在 Swift 中，你可以選擇一個名稱，然後透過定義一個「常數」讓它與一個值關聯。稍後在本課程中，你將會更深入探索常數。目前，了解常數是 Swift 中命名值的基礎方式即已足夠。

使用單字 `let`，後面加上名稱來定義一個常數，然後使用等號 `=` 給予這個常數一個值：
 */
let numberOfDogs = 6 + 2

let numberOfCats = 5 - 1

let numberOfTurtles = 2 + 1

let numberOfHamsters = 2 + 1
//: 定義常數並指定其值之後，你可以在使用該值的任一處使用常數，包括在定義另一個常數值的數學計算中：

let totalNumberOfAnimals = numberOfDogs + numberOfCats + numberOfTurtles + numberOfHamsters

let totalNumberOfMammals = numberOfDogs + numberOfCats + numberOfHamsters

/*:
如此一來要更新特定種類的動物數目就簡單多了，且不容易出錯。你只需要在定義常數的地方更新值。

甚至可在等號的右側執行加減，讓 Playground 幫你進行計算。例如，如果有另外兩人都帶狗來，你不需要將 6 變更為 8，而是可以輸入：

`let numberOfDogs = 6 + 2`

 - callout(實驗：): 隨著一週過去，你得到越來越多關於大家的寵物資訊。\
更新上方的程式碼以符合下列更新情況：
   - 有另外兩人各帶了一隻狗。
   - 其中一隻貓不能來。
   - 生病的烏龜好多了，將會在寵物展中出現。
   - 另一人帶了倉鼠。

完成實驗之後，繼續進行課程。

[上一頁](@previous)  |  第 4 頁，共 14 頁  |  [下一頁：輸入名稱和自動補完](@next)
 */