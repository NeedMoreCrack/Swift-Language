/*:
## 單項工作

 你可以將要多次使用的程式碼合併在一個函數中。與使用 `let`「宣告」常數名稱的方式類似，你可以使用 `func` 宣告函數。
 
 因為函數可以包含多行程式碼，宣告會較為複雜。以下是一個非常簡單的函數：
 */
func rowTheBoat() {
    print("Row, row, row your boat")
    print("Gently down the stream")
}
/*:
 該函數的「名稱」是 `rowTheBoat()`。稍後你將學習更多有關 `()` 的知識，現在只要記住，任何後面接著括號的識別碼就是一個函數。

 兩個大括弧 `{`...`}` 之間的程式碼被稱為函數的「主體」。
 
 這些程式碼行和你在 Playground 中看到的其他程式碼不同。結果側邊欄或主控台中不會顯示任何內容。這是因為宣告函數只會描述函數執行時會有的功能。 
 
 若要真正執行程式碼，你必須呼叫函數。輸入函數的名稱將會呼叫函數。取消註解下面這行：
 */
//rowTheBoat()
/*:
 當你在 Playground 中呼叫函數時，將會在側邊欄中看到結果。呼叫 `rowTheBoat` 函數也會在下方的主控台區域中列印文字。

 - callout(練習：): 編寫自己的函數，該函數將某些內容列印到主控台，然後呼叫新函數。注意上方的範例，熟悉所有括號 `()` 和大括弧 `{}` 應在的位置。
 如果呼叫函數多次，會發生什麼事？
 */

/*:
接下來，我們來了解如何看待任務，並將它們以合理的方式劃分開來。

[上一頁](@previous)  |  第 4 頁，共 12 頁  |  [下一頁：分解任務](@next)
 */