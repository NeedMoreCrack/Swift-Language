/*:
## 令人混淆的變更

若你的生活出現改變，便會碰到某種程度的困擾。
 
想像一下你約好在晚上 8 點和六個朋友去看電影。

你收到訊息通知計畫生變，現在你們要在不同的戲院看不同的電影，而且時間改到晚上 9 點。

過了一會，你又收到訊息說計畫又變了。現在，你們只是要到朋友家中一起看電影。時間改為下午 6 點，而且你要負責訂購披薩。
 
然後，你又收到訊息說改成去另外一位朋友家，時間改成下午 6 點半。

 - callout(實驗：): 經過三番兩次的更動，最後有可能每個人都會在正確的時間出現在正確的地點嗎？\
\
如果計畫未生變，發生錯誤的可能性是否降低？

只要有變更，就有人可能按照舊資訊赴約，而導致犯錯。
 
在程式設計中也是如此。如果可以定義常數，就要確保該值永不改變。程式的其他部分就不可能不同步或使用舊值。
 
 但有時候你必須使用變數。隨著程式執行，事情有了改變。在程式設計中，根據「變異 (mutate)」一字，能夠變更的東西稱為「可變更的 (mutable)」，即意味「改變」。
 
 無法變更的東西稱為「不可變更的 (immutable)」。如果事物不需要變更，則最佳做法是使用常數。你就能降低造成混淆與錯誤的可能。

 說到錯誤，我們接下來繼續學習使用常數和變數時常見的錯誤。
 
[上一頁](@previous)  |  第 6 頁，共 13 頁  |  [下一頁：嘗試變更常數](@next)
 */