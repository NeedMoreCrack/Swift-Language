/*:
## 為何使用方法與屬性？
 
 在本課程中，你已經學習了一些細微但功能強大的概念，可以協助你編寫程式碼。
 
 有了方法和屬性，每個特定類型的實例就會有可存取的值集和可使用的行為集。
 
 方法和屬性透過將資訊的相關部分 (屬性) 和要執行的工作 (方法) 一起置於一個獨立的套件 (實例) 中，協助降低大型程式的複雜程度。
 
 以 `String` 為例，你可以在類型之外編寫 `hasPrefix()` 函數，以採用一個字串來進行測試，而另一個字串具有要檢查的字首：

 `func hasPrefix(fullString: String, prefixString: String)`

這種類型的函數稱為頂層函數，因為它不會包含在其他任何內容中。到目前為止，你所編寫的所有函數都是頂層函數。
 
但與頂層函數和變數相比，使用方法和屬性具有明顯的優勢：

- 將類型的功能與類型本身放在一起，讓程式碼更容易了解。
- 自動補完效果更好：自動補完僅會提供你輸入時可套用的方法。如果所有方法都是頂層函數，那麼無論何時開始輸入，系統中的每個函數都會顯示出來。
- 說明文件更容易組織與尋找：你如何分類所有頂層函數來處理字串或數字？如果有函數可以同時處理兩者呢？你要如何搜尋此說明文件？
 
 在之前的課程中，你已經學到函數可以減少複雜程度，但仍易於使用，尤其在其名稱能夠清楚表示用途時更是如此。具有方法和屬性的實例就是這種想法的延伸。你知道 `String` 的每個實例可以告訴你它「是否是空的」，或者它是否「有字首」與所傳入的字串相符。你看不到提供答案的實例背後的複雜度。當你使用字串時，只需要呼叫方法和屬性來完成作業，而 `String` 類型會處理所有細節。

[上一頁](@previous)  |  第 13 頁，共 17 頁  |  [下一頁：總結](@next)
 */

